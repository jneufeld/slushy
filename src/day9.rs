use std::collections::HashSet;

pub fn solve() {
    // Expect 36
    //let input = PART_2_SAMPLE;

    // Expect 2303
    let input = PART_2_CONTEST;

    let moves = parse_moves(input);

    let mut head = Position::start();

    // TODO start yikes
    let mut k1 = Position::start();
    let mut k2 = Position::start();
    let mut k3 = Position::start();
    let mut k4 = Position::start();
    let mut k5 = Position::start();
    let mut k6 = Position::start();
    let mut k7 = Position::start();
    let mut k8 = Position::start();
    // TODO end yikes

    let mut tail = Position::start();

    let mut tail_positions = HashSet::new();
    tail_positions.insert(tail);

    for movement in moves.iter() {
        let steps = movement.steps;

        for _ in 0..steps {
            match movement.direction {
                Direction::Up => head.y += 1,
                Direction::Down => head.y -= 1,
                Direction::Right => head.x += 1,
                Direction::Left => head.x -= 1,
            }

            let _ = k1.follow(&head);
            let _ = k2.follow(&k1);
            let _ = k3.follow(&k2);
            let _ = k4.follow(&k3);
            let _ = k5.follow(&k4);
            let _ = k6.follow(&k5);
            let _ = k7.follow(&k6);
            let _ = k8.follow(&k7);

            let tail_visited = tail.follow(&k8);

            tail_positions.extend(tail_visited);
        }
    }

    println!("{}", tail_positions.len());
}

#[derive(Debug, Clone, Copy)]
struct Move {
    direction: Direction,
    steps: isize,
}

impl Move {
    fn new(direction: Direction, steps: isize) -> Self {
        Move { direction, steps }
    }
}

#[derive(Debug, Clone, Copy)]
enum Direction {
    Up,
    Down,
    Right,
    Left,
}

impl From<char> for Direction {
    fn from(c: char) -> Self {
        match c {
            'U' => Direction::Up,
            'D' => Direction::Down,
            'R' => Direction::Right,
            'L' => Direction::Left,
            _ => panic!("can't parse direction from {}", c),
        }
    }
}

fn parse_moves(input: &str) -> Vec<Move> {
    let mut moves = Vec::new();

    for line in input.split('\n') {
        let mut characters = line.chars().peekable();

        // Direction is created from a single character. If parsing fails, it
        // will panic.
        let character = characters.next().unwrap();
        let direction = Direction::from(character);

        // The next character is a space (well-defined input)
        let _ignore_space = characters.next();

        // The remaining characters are digits
        let mut steps = String::new();

        while let Some(digit) = characters.next_if(|c| c.is_ascii_digit()) {
            steps.push(digit);
        }

        let steps = steps.parse::<isize>().unwrap();

        moves.push(Move::new(direction, steps));
    }

    moves
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
struct Position {
    x: isize,
    y: isize,
}

impl Position {
    fn start() -> Self {
        Position { x: 0, y: 0 }
    }

    fn follow(&mut self, other: &Position) -> Vec<Position> {
        let mut positions = Vec::new();
        positions.push(self.clone());

        // Distance from this to other in x and y coordinates
        let x_dist = self.x.abs_diff(other.x);
        let y_dist = self.y.abs_diff(other.y);

        // Move diagonally
        if y_dist > 1 && x_dist >= 1 || y_dist >= 1 && x_dist > 1 {
            if other.y > self.y {
                self.y += 1;
            } else {
                self.y -= 1;
            }

            if other.x > self.x {
                self.x += 1;
            } else {
                self.x -= 1;
            }
        } else if y_dist > 1 {
            // Move only up or down
            if other.y > self.y {
                self.y += 1;
            } else {
                self.y -= 1;
            }
        } else if x_dist > 1 {
            // Move only right or left
            if other.x > self.x {
                self.x += 1;
            } else {
                self.x -= 1;
            }
        }

        positions.push(self.clone());

        positions
    }
}

const PART_2_SAMPLE: &str = r"R 5
U 8
L 8
D 3
R 17
D 10
L 25
U 20";

const PART_2_CONTEST: &str = r"U 1
L 1
R 2
L 1
D 2
R 1
U 2
R 1
U 1
R 2
D 2
L 1
R 1
D 2
R 1
L 1
R 1
D 1
U 1
R 1
L 1
R 2
U 1
R 1
D 2
L 2
U 1
R 1
D 1
L 1
R 1
L 2
D 1
U 1
D 2
R 2
D 2
R 2
D 2
R 2
U 1
L 2
R 2
D 2
L 2
U 2
R 1
L 1
U 1
R 1
D 1
R 1
L 1
R 1
D 2
L 2
U 1
R 1
L 1
R 1
U 2
D 2
U 2
L 1
U 2
L 1
R 2
U 2
D 1
L 1
R 1
L 2
U 1
D 2
R 2
U 2
R 1
L 1
U 2
R 2
L 1
R 2
D 1
U 2
D 2
R 2
L 1
R 1
U 2
D 2
U 2
D 1
U 1
R 2
D 1
R 1
L 1
D 2
L 2
U 2
R 2
U 1
R 2
U 1
D 1
R 2
U 1
R 1
U 2
R 2
D 2
L 2
D 3
R 2
U 2
R 2
U 2
L 3
U 1
L 1
R 3
D 2
R 2
U 1
L 2
D 2
L 3
U 3
D 2
R 3
U 3
R 2
D 2
U 3
L 1
U 2
R 2
L 1
D 3
U 1
R 3
L 2
D 1
U 2
L 3
R 3
U 3
L 1
D 1
R 3
D 3
R 1
U 2
R 3
L 2
R 1
U 2
L 3
D 1
R 3
U 2
D 2
R 2
D 3
L 3
D 1
L 2
D 1
R 2
L 1
D 2
U 1
D 3
U 1
R 1
U 1
R 3
L 3
U 2
D 3
R 3
U 1
L 1
R 1
U 3
L 2
U 2
D 3
L 2
D 1
R 2
D 2
L 1
R 2
U 1
D 3
R 3
D 2
R 3
L 3
R 3
D 1
U 1
R 1
U 2
D 2
L 2
D 3
R 2
D 3
U 2
L 2
R 1
U 3
L 1
D 1
U 1
D 2
U 1
L 3
R 2
D 1
L 3
U 1
R 3
D 2
U 4
D 1
L 4
R 2
L 2
R 2
U 4
R 1
U 3
L 2
U 2
R 3
L 3
D 3
R 4
D 4
R 3
D 1
L 4
D 4
U 3
D 3
L 4
R 4
L 2
R 3
L 4
D 3
L 3
U 1
R 2
U 1
L 3
U 4
D 1
L 2
U 2
L 1
D 1
R 2
L 4
R 3
U 4
R 1
D 1
R 1
U 3
D 4
R 1
U 4
R 2
D 2
U 2
R 2
U 4
L 1
D 3
L 4
D 2
L 2
D 2
U 4
L 4
R 1
D 1
R 3
D 3
L 4
R 3
D 2
R 1
D 1
R 1
U 1
D 1
L 1
D 1
R 2
L 3
D 1
R 1
L 4
D 4
R 4
L 3
D 4
U 2
L 1
D 3
U 2
D 1
R 2
D 2
L 2
U 1
D 4
R 3
U 4
D 1
R 3
U 1
D 1
U 1
R 1
D 1
R 3
U 4
R 4
U 2
L 1
U 1
L 3
R 5
D 2
U 1
R 3
D 3
R 1
D 1
L 5
R 1
D 1
R 2
U 3
R 2
L 4
U 3
D 4
U 1
R 3
D 1
R 2
L 3
R 3
U 2
L 5
U 3
R 4
D 4
R 2
D 3
R 2
U 4
L 5
R 2
L 3
U 4
L 5
R 3
D 3
U 4
R 2
U 5
R 2
U 5
D 1
L 2
D 2
U 3
R 3
L 3
U 3
D 5
R 4
D 4
L 4
D 5
R 1
U 4
L 2
R 1
D 3
L 2
R 2
L 3
R 2
L 2
D 3
U 5
D 5
L 3
R 5
U 3
L 3
D 5
L 4
D 1
L 2
D 4
U 4
D 1
R 1
L 4
R 3
U 2
L 3
U 4
D 4
R 2
D 4
U 2
D 4
U 2
L 4
D 5
L 4
R 1
L 2
R 3
D 2
R 5
L 1
U 5
R 1
D 5
L 1
D 2
U 5
D 2
U 1
D 6
U 2
L 5
D 2
R 1
D 1
R 1
D 5
U 1
D 5
R 4
L 3
R 4
U 1
D 5
U 5
L 4
U 5
L 4
U 5
R 2
L 6
D 4
L 1
U 1
R 6
D 4
L 1
D 2
R 2
U 5
R 5
U 4
L 5
R 4
D 4
U 4
D 1
R 2
L 5
U 3
R 1
L 3
U 6
R 5
L 2
D 4
R 4
U 5
R 2
U 6
L 4
U 6
R 2
L 6
D 5
R 6
U 1
L 3
U 4
R 2
L 5
D 4
L 6
U 1
D 1
R 2
D 5
L 1
R 5
L 3
U 5
D 4
U 5
D 4
U 2
R 4
L 3
D 4
L 5
R 6
U 6
D 5
U 2
R 4
D 5
L 5
R 3
L 3
D 3
U 6
L 1
D 3
R 2
L 3
R 2
L 6
D 1
L 6
D 4
L 6
R 4
D 5
L 3
U 6
R 5
U 4
D 1
L 5
U 1
D 2
U 2
D 5
R 7
L 3
U 5
R 4
L 5
U 1
R 2
D 6
L 6
D 2
L 1
D 6
U 2
D 2
U 2
D 6
L 1
R 6
U 7
D 2
L 3
R 3
U 6
D 3
R 4
U 3
L 7
D 3
U 6
D 2
U 1
R 4
L 1
R 3
U 5
D 6
R 2
L 4
D 5
R 6
L 5
D 1
R 3
D 2
L 7
U 1
R 5
D 6
U 6
D 4
U 6
D 2
L 2
U 7
D 1
R 3
U 3
R 1
L 6
D 7
L 4
R 1
D 7
L 2
U 6
D 2
R 6
D 7
U 7
R 5
L 1
U 3
R 5
D 4
U 2
D 2
L 6
D 2
U 7
R 4
L 7
U 4
D 6
U 2
D 6
L 3
U 5
R 5
D 4
R 1
D 6
U 6
R 3
L 2
U 1
R 7
D 4
L 2
D 4
L 5
U 3
R 6
L 3
D 7
R 7
L 1
U 4
L 6
R 7
U 3
R 1
D 8
L 3
D 3
U 3
R 2
L 6
U 4
L 2
D 7
L 5
D 1
R 3
U 2
L 6
R 2
U 1
D 6
U 4
D 1
U 8
D 7
R 3
L 3
R 1
D 1
R 5
L 5
R 6
U 4
R 4
U 3
R 4
L 6
R 4
U 6
L 5
U 8
L 1
D 1
L 4
U 8
R 2
U 7
L 4
U 7
L 7
D 5
U 1
R 7
U 7
D 6
R 5
U 5
D 2
R 8
L 1
D 3
L 5
D 5
R 1
U 1
R 4
D 3
R 1
U 4
R 8
D 3
L 4
R 7
L 4
R 7
L 7
R 1
L 1
D 2
L 6
R 7
D 5
U 7
L 8
U 1
L 8
U 2
R 6
L 4
U 1
R 1
U 3
L 6
D 7
L 3
D 2
R 4
U 5
D 1
U 2
D 6
L 6
U 4
D 1
L 2
R 4
U 2
L 1
R 5
L 3
R 5
U 7
R 4
L 4
R 2
D 4
L 1
R 2
D 1
L 2
R 2
U 2
R 5
L 7
U 3
R 1
D 5
U 7
D 8
R 7
D 5
U 2
L 5
D 4
L 2
D 8
U 7
D 3
U 4
L 9
D 2
U 7
R 7
D 9
U 3
R 2
L 7
U 5
L 9
D 5
R 6
D 5
R 1
D 1
R 5
D 3
U 2
R 5
D 8
U 4
R 9
U 5
L 2
U 2
R 5
D 9
U 2
D 3
R 4
D 5
U 7
L 2
U 8
R 7
L 1
U 4
D 6
R 8
U 3
D 4
U 1
R 5
U 8
D 9
U 5
D 9
R 7
D 3
L 1
D 4
R 8
D 8
U 5
D 7
L 5
U 1
D 6
L 7
D 1
R 1
U 2
L 3
R 4
L 1
D 7
L 3
U 9
R 1
U 9
L 7
R 1
U 5
L 4
U 8
D 9
U 3
D 9
R 5
U 8
L 9
U 9
D 7
R 7
L 2
U 9
R 7
U 10
D 7
L 1
D 2
R 4
D 9
L 4
D 7
R 9
U 1
D 4
U 8
L 9
R 9
D 3
R 2
D 7
U 2
D 7
U 1
R 3
D 1
U 10
D 5
U 6
D 1
R 5
D 6
U 1
R 6
U 2
D 5
U 8
L 9
D 1
U 9
D 6
L 10
R 4
D 1
L 6
R 1
L 3
D 4
R 9
D 7
R 4
D 8
R 8
L 5
U 7
R 3
U 5
D 4
L 5
D 7
L 10
U 3
D 9
R 7
U 4
D 3
R 7
U 5
D 10
R 1
L 7
U 7
R 5
U 4
L 7
D 6
R 1
D 1
R 4
L 3
R 4
D 3
L 7
D 7
L 6
R 4
L 1
D 2
U 4
D 8
L 8
R 1
U 4
D 1
U 2
L 1
R 4
U 7
D 9
U 4
D 10
U 5
R 3
D 6
U 7
D 6
L 7
R 7
L 7
R 6
D 4
U 4
L 7
U 9
L 6
D 2
L 2
U 10
L 4
U 3
D 3
L 5
U 10
D 10
R 8
D 2
L 6
D 9
R 7
L 8
R 3
U 1
D 4
U 2
R 4
U 5
D 8
U 6
L 4
U 9
R 5
U 8
L 11
D 11
U 6
D 4
U 3
R 7
L 8
R 5
D 5
U 5
R 1
U 10
L 4
D 6
U 11
R 3
D 10
U 10
L 7
R 11
U 9
L 10
U 10
L 11
D 2
L 9
D 3
L 11
D 2
U 1
D 5
L 6
U 3
D 10
R 8
U 10
R 9
L 1
D 6
U 6
D 6
L 8
R 3
U 1
D 2
L 6
R 10
U 7
D 2
L 5
D 10
U 5
D 9
R 4
L 9
D 6
U 9
R 5
L 9
U 1
D 2
R 2
L 5
R 4
D 8
U 8
D 11
L 4
D 3
U 1
L 9
R 8
L 10
R 8
L 10
U 10
D 5
R 11
U 2
R 8
U 1
L 6
U 5
D 2
U 2
R 3
L 4
R 1
D 6
L 6
U 5
R 1
L 6
D 1
R 5
L 2
R 11
D 5
L 6
R 1
D 11
U 9
D 12
U 8
R 7
L 6
R 9
U 7
D 2
R 5
D 12
L 10
D 7
L 5
U 7
D 9
R 7
U 8
D 3
U 8
D 5
U 1
L 10
U 7
L 2
R 5
L 2
U 1
L 8
R 2
D 8
R 9
D 9
R 11
D 4
R 3
U 2
D 9
R 12
U 11
D 8
R 6
D 9
U 3
L 5
R 1
U 4
R 4
U 10
R 11
U 5
R 9
U 1
R 5
D 3
R 8
U 3
R 6
U 4
R 3
D 2
L 2
U 7
L 2
U 12
D 10
L 7
U 6
R 7
U 1
L 11
U 12
R 12
L 12
D 10
R 9
U 12
L 6
U 2
L 7
U 11
R 7
U 6
L 3
U 3
D 1
U 11
R 1
D 4
R 10
L 10
R 6
D 11
R 1
D 5
L 1
R 1
L 4
R 7
U 12
R 6
L 10
D 12
L 4
R 8
U 5
L 7
R 10
D 13
U 7
D 1
R 1
D 9
R 3
D 1
L 4
D 3
R 5
U 9
R 11
L 4
R 1
D 11
L 2
R 4
D 7
R 3
U 2
D 6
R 2
L 13
R 5
L 4
R 4
U 13
R 3
U 4
R 3
D 1
L 3
U 6
L 8
U 5
R 4
D 10
L 3
U 10
R 11
D 11
U 2
D 2
R 4
U 2
D 1
R 10
U 5
L 9
U 11
R 10
D 4
L 1
U 5
R 4
U 6
R 9
D 12
L 10
R 5
L 5
D 9
U 2
R 7
U 2
R 5
L 8
D 5
R 1
D 5
R 8
U 11
R 7
L 13
U 10
D 3
U 1
D 2
L 1
D 12
L 9
D 12
R 5
U 8
R 6
L 6
R 5
U 7
L 10
D 5
U 11
D 4
U 8
R 7
U 8
R 2
L 10
D 5
L 10
D 3
U 13
D 11
U 3
R 10
U 9
D 7
U 6
R 1
U 9
R 11
D 7
R 6
U 9
R 6
U 12
D 6
R 13
L 14
U 10
R 9
L 13
R 7
D 9
U 12
L 8
D 5
R 3
U 5
R 10
L 4
D 5
R 4
D 2
L 12
R 8
D 9
R 5
D 7
U 5
D 11
L 13
D 12
R 2
U 5
L 1
U 2
L 6
U 9
D 10
L 3
D 8
R 12
U 9
R 9
U 9
R 8
U 6
L 10
U 5
R 9
D 2
U 12
D 3
R 12
L 10
D 5
L 7
D 9
L 5
R 7
D 8
U 10
L 11
R 9
L 13
R 8
U 9
D 8
U 9
R 10
L 4
U 1
D 10
L 1
D 4
L 1
U 13
R 8
L 3
D 5
R 5
U 4
R 5
U 6
L 14
R 5
U 8
L 7
D 7
R 4
U 4
L 14
U 7
R 14
D 3
U 10
L 7
R 5
L 5
R 15
L 3
D 15
L 6
R 3
L 10
U 7
L 2
R 7
L 1
R 8
U 12
D 6
U 11
D 12
U 9
R 2
D 14
L 4
U 9
D 15
R 8
D 9
L 9
D 14
U 5
R 14
D 15
R 6
L 3
U 13
R 13
U 5
D 14
L 2
D 12
U 6
R 5
U 5
L 6
R 5
D 12
U 9
L 7
D 15
R 5
U 7
D 1
R 2
L 11
U 8
R 3
D 3
U 6
D 15
U 2
D 11
R 6
U 9
D 7
U 3
L 13
U 3
L 15
R 10
L 6
D 15
L 3
U 5
R 13
D 13
L 5
R 8
D 2
R 8
L 9
R 7
L 5
U 3
D 11
R 13
U 15
D 5
R 4
U 11
R 14
L 1
U 6
L 13
R 14
L 12
D 5
R 3
D 4
R 5
U 8
R 11
D 8
U 5
R 9
D 8
R 4
U 5
L 7
D 6
U 4
L 2
D 15
U 5
R 16
L 4
R 1
D 12
L 2
R 6
D 6
R 14
U 6
L 14
R 12
D 8
R 1
U 2
R 3
D 7
R 4
L 2
U 6
L 1
U 7
L 12
R 11
D 13
U 16
R 15
D 14
U 13
D 15
R 11
U 12
R 5
D 8
R 2
L 14
R 10
L 16
U 10
D 13
L 11
U 10
R 5
D 7
L 15
D 12
L 4
R 16
U 8
R 8
L 7
U 9
R 7
U 16
R 2
U 5
R 5
D 4
L 7
D 5
L 4
U 13
D 9
R 2
D 2
U 5
L 3
D 16
R 13
L 10
R 7
L 9
R 3
L 5
D 10
L 10
R 2
L 13
R 5
L 11
R 16
U 12
R 11
D 12
R 7
L 2
U 12
D 11
U 12
L 1
R 6
U 3
L 3
D 1
R 5
U 6
L 15
R 8
D 5
L 16
D 13
R 15
D 14
R 4
U 15
R 5
L 8
D 12
U 11
D 13
L 9
D 13
L 7
U 9
R 15
U 13
D 16
R 6
L 8
R 7
U 4
R 10
U 7
D 10
U 8
D 7
L 17
R 7
L 8
D 5
L 5
U 15
D 6
L 1
D 2
R 17
L 6
D 15
R 4
L 2
R 10
D 4
R 6
D 11
U 1
L 17
D 11
U 6
D 17
R 15
L 13
D 9
R 12
U 13
R 2
L 12
D 1
R 17
U 13
D 15
U 7
R 8
D 6
R 8
D 16
U 16
D 2
U 1
R 7
U 15
L 7
R 12
U 10
D 4
R 17
D 11
R 12
D 8
L 3
R 3
D 5
R 17
L 15
U 11
R 1
L 4
R 6
D 6
U 2
L 1
D 2
U 1
D 11
L 1
R 11
D 7
U 16
L 14
U 5
R 13
D 9
U 17
D 3
R 12
U 16
R 10
L 17
D 5
U 16
D 12
L 2
R 16
L 17
U 4
R 15
D 4
L 11
U 3
R 17
D 8
R 7
D 15
R 14
D 6
R 5
L 1
D 5
L 11
D 5
U 13
L 13
U 8
D 8
L 13
D 1
L 10
U 14
R 7
L 11
D 4
R 16
D 3
L 9
R 3
D 4
L 4
U 2
R 13
D 18
U 15
D 7
L 18
U 3
D 17
U 13
R 9
L 8
R 9
U 16
R 14
D 17
L 16
R 3
U 4
D 1
R 8
D 14
L 14
U 17
L 16
R 15
D 9
U 13
R 14
U 9
D 13
R 2
L 3
D 8
U 5
R 1
L 5
R 4
U 8
L 7
U 5
R 11
D 17
L 4
U 3
R 1
U 18
D 1
U 6
R 2
D 16
U 15
D 8
L 13
R 2
U 16
L 9
D 1
U 9
R 5
L 16
D 2
L 2
R 8
D 17
R 13
U 5
R 6
U 2
L 12
R 2
D 14
R 14
L 11
R 1
L 9
D 18
L 4
U 4
D 15
L 14
R 15
U 6
D 3
R 15
L 12
U 3
D 12
U 13
L 6
U 17
D 6
L 10
R 16
L 7
U 2
D 1
R 10
U 11
R 1
U 19
D 5
L 11
D 14
L 17
U 16
L 13
R 4
L 16
D 10
L 4
D 9
R 19
L 19
R 12
L 12
D 8
L 6
D 14
U 7
D 13
U 18
D 13
U 6
D 6
R 18
U 18
D 15
L 14
R 7
D 11
R 4
L 14
R 5
D 4
L 12
D 16
R 17
U 15
L 9
U 10
R 7
D 10
L 3
U 15
L 1
D 15
U 1
D 12
L 4
D 10
U 6
R 6
L 11
D 5
R 1
D 11
U 16
L 16
R 19
U 8
R 11
D 17
L 19
R 6
U 7
R 2
D 9
R 11
D 17
U 17
D 4
R 8
D 6
U 10
R 3
L 17
D 5
R 19
U 1
L 5
U 5
D 6
U 6
L 18
R 18
L 4
R 12
D 14
L 17
R 8
L 13
R 6
L 14
D 3
R 13
L 16
D 14
U 6
D 6";
